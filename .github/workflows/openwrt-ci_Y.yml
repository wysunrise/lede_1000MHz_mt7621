#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: zte_e8820s or xiaomi_redmi-router-ac2100 

on:
  workflow_dispatch:
    inputs:
      model:
        description: '选择设备'
        required: true
        default: 'zte_e8820s'
        type: choice
        options:
          - 'zte_e8820s'
          - 'xiaomi_redmi-router-ac2100'
          # - 'xiaomi-4a-gigabit'
          # - 'xiaomi-3g-v2'
          # - 'xiaomi-cr6608'
          # - 'xiaomi-cr6606'
          # - 'xiaomi-cr6609'
          # - 'xiaomi-3g'
          # - 'xiaomi-4'
          # - 'xiaomi-3-pro'
          # - 'xiaomi-ac2100'
          # - 'phicomm-k2p'
          # - 'redmi-ax6s'
          # - 'xiaomi-4a-100m'
          # - 'xiaomi-4c'
          # - 'miwifi-nano'
          # - 'glinet-mt300n-v2'
          # - 'glinet-microuter-n300'
          # - 'miwifi-mini'
          # - 'miwifi-r3'
  # push:
  #   branches: 
  #     - master
  # schedule:
  #   - cron: 0 20 * * *
  # release:
  #   types: [published]

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@main
        
      - name: Space cleanup and Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* moby* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          

      # - name: Space cleanup
      #   env:
      #     DEBIAN_FRONTEND: noninteractive
      #   run: |
      #     docker rmi `docker images -q`
      #     sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
      #     sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
      #     sudo -E apt-get update
      #     sudo -E apt-get upgrade
      #     sudo -E apt-get update
      #     sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig libtinfo5
      #     sudo -E apt-get -y autoremove --purge
      #     sudo -E apt-get clean

      #     df -h

      - name: Update feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        run: |
          rm -f ./.config*
          touch ./.config

          #
          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
          # 例如:

          cat >> .config <<EOF
          CONFIG_TARGET_ramips=y
          CONFIG_TARGET_ramips_mt7621=y
          CONFIG_TARGET_ramips_mt7621_DEVICE_${{ inputs.model }}=y
          EOF

          #
          # ===============================================================
          # 

          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

      - name: Make download
        run: |
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
          du -h /mnt/openwrt/ --max-depth=1 || true

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      # - name: Deliver buildinfo
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: OpenWrt_buildinfo
      #     path: ./artifact/buildinfo/

      # - name: Deliver package
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: OpenWrt_package
      #     path: ./artifact/package/

      - name: Set current date as env variable   
        run: |     
          echo "FILE_DATE=$(date +"%m%d_%H%M")" >> $GITHUB_ENV

      - name: Deliver firmware
        uses: actions/upload-artifact@main 
        with:
          name: ${{ inputs.model }}_${{ env.FILE_DATE }}
          path: ./bin/targets/
        
      - name: Upload release asset
        # if: github.event == 'release'
        uses: svenstaro/upload-release-action@master
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ inputs.model }}_${{ env.FILE_DATE }}
          file_glob: true

      - name: 上传固件到WeTransfer
        id: wetransfer
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ./artifact/firmware/ 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"